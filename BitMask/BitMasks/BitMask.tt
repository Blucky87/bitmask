<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #><#
    const int NumberOfFields = 2;
#>using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace BitMasks
{
    using FieldType = UInt64;

    public struct BitMask : IEquatable<BitMask>
    {
        public static readonly BitMask None = new BitMask(bits: new int[0]);

        private const int FieldCount = <#= NumberOfFields #>;
        private const int BitsPerField = 8 * sizeof(FieldType);
        private const int MaxBitIndex = (FieldCount * BitsPerField) - 1;

        public const int BitSize = FieldCount * BitsPerField;

<#
    for (int i = 0; i < NumberOfFields; ++i)
    {
#>
        private FieldType _field<#= i #>;
<#
    }
#>

        public BitMask(int[] bits)
        {
<#
    for (int i = 0; i < NumberOfFields; ++i)
    {
#>
            _field<#= i #> = 0;
<#
    }
#>

            for (int i = 0; i < bits.Length; ++i)
            {
                ref var bit = ref bits[i];

                if (bit < 0 || bit > MaxBitIndex)
                    throw new Exception($"Attempted to set bit #{bit}, but the maximum is {MaxBitIndex}");

                var dataIndex = bit / BitsPerField;
                var bitIndex = bit % BitsPerField;

                var mask = (FieldType) 1 << bitIndex;

                switch (dataIndex)
                {
<#
    for (int i = 0; i < NumberOfFields; ++i)
    {
#>
                    case <#= i #>:
                        _field<#= i #> |= mask;
                        break;
<#
    }
#>
                    default:
                        throw new Exception($"Nonexistent field: {dataIndex}");
                }
            }
        }

        public bool this[int index]
        {
            get
            {
                if (index < 0 || index > MaxBitIndex)
                    throw new Exception($"Invalid bit index: {index}");

                var dataIndex = index / BitsPerField;
                var bitIndex = index % BitsPerField;

                switch (dataIndex)
                {
<#
    for (int i = 0; i < NumberOfFields; ++i)
    {
#>
                    case <#= i #>:
                        return (_field<#= i #> & ((FieldType) 1 << bitIndex)) != 0;
<#
    }
#>
                    default:
                        return false;
                }
            }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(BitMask other)
        {
<#
    for (int i = 0; i < NumberOfFields; ++i)
    {
#>
            if (_field<#= i #> != other._field<#= i #>)
                return false;

<#
    }
#>
            return true;
        }

        public override bool Equals(object obj)
        {
            if (obj is BitMask)
                return Equals((BitMask) obj);

            return base.Equals(obj);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator ==(BitMask mask1, BitMask mask2)
        {
            return mask1.Equals(mask2);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool operator !=(BitMask mask1, BitMask mask2)
        {
            return !mask1.Equals(mask2);
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static BitMask operator &(BitMask mask1, BitMask mask2)
        {
            var newBitMask = new BitMask();

<#
    for (int i = 0; i < NumberOfFields; ++i)
    {
#>
            newBitMask._field<#= i #> = mask1._field<#= i #> & mask2._field<#= i #>;
<#
    }
#>

            return newBitMask;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static BitMask operator |(BitMask mask1, BitMask mask2)
        {
            var newBitMask = new BitMask();

<#
    for (int i = 0; i < NumberOfFields; ++i)
    {
#>
            newBitMask._field<#= i #> = mask1._field<#= i #> | mask2._field<#= i #>;
<#
    }
#>

            return newBitMask;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static BitMask operator ~(BitMask mask)
        {
            var newBitMask = new BitMask();

<#
    for (int i = 0; i < NumberOfFields; ++i)
    {
#>
            newBitMask._field<#= i #> = ~mask._field<#= i #>;
<#
    }
#>

            return newBitMask;
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Has(BitMask mask)
        {
<#
    for (int i = 0; i < NumberOfFields; ++i)
    {
#>
            if ((_field<#= i #> & mask._field<#= i #>) != mask._field<#= i #>)
                return false;

<#
    }
#>
            return true;
        }

        public override string ToString()
        {
            var builder = new StringBuilder();

            var fields = new FieldType[FieldCount];

<#
    for (int i = 0; i < NumberOfFields; ++i)
    {
#>
            fields[<#= i #>] = _field<#= i #>;
<#
    }
#>

            for (int i = 0; i < FieldCount; ++i)
            {
                var binaryString = Convert.ToString((long) fields[i], 2);

                builder.Append(binaryString.PadLeft(BitsPerField, '0'));
            }

            return builder.ToString();
        }
    }
}
